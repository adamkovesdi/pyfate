#!/usr/bin/env python3
import random
import time
import json
rollstring = '++++++++--------        '

def roll():
    return ''.join(random.sample(rollstring,4))

def evaluate_roll(rolled, mod=0):
    return rolled.count('+') - rolled.count('-') + mod

def calculate_mod(rollstring):
    if len(rollstring) == 1: return 0
    try:
        return int(rollstring[1:])
    except ValueError:
        return -9999

def create_rollobject(rollstring):
    if rollstring is None: return
    rollobject = {}
    rollobject["rollcommand"] = rollstring
    rollobject["fatestring"] = roll()
    rollobject["rollvalue"] = evaluate_roll(rollobject["fatestring"])
    rollobject["mod"] = calculate_mod(rollstring)
    rollobject["result"] = evaluate_roll(rollobject["fatestring"],
        rollobject["mod"])
    return rollobject

def diff_rollobjects(rollobjects):
    if len(rollobjects) == 2:
        return rollobjects[0]["result"] - rollobjects[1]["result"]
    else:
        return 0

def dorolls(rollstrings):
    if rollstrings is None: return
    results = []
    for rollstring in rollstrings:
        rollobject = create_rollobject(rollstring)
        results.append(rollobject)
    return results

def getrolls(tokens):
    rollcmds = list(filter(lambda x: x[0] == '!', tokens))
    return rollcmds

def get_rollobjects(line):
    tokens = line.split()
    rolls = getrolls(tokens)
    rollobjects = dorolls(rolls)
    return rollobjects

def create_logentry(rollobjects, message):
    logentry = {}
    logentry["timestamp"] = time.time()
    logentry["timestring"] = time.ctime()
    logentry["message"] = message
    logentry["rollobjects"] = rollobjects
    return logentry

def save_logbook(logbook):
    with open('logbook.json', 'w') as fp:
        json.dump(logbook, fp)

def load_logbook():
    with open('logbook.json', 'r') as fp:
        return json.load(fp)
    
# Display and input code follows

def print_logentry(logentry):
    print(logentry["timestring"])
    print(logentry["message"])
    rollobjects = logentry["rollobjects"]
    for r in rollobjects:
        print(' [{0}] {1} + {2} = {3}'.format(r["fatestring"], r["rollvalue"], r["mod"], r["result"]))
    if len(rollobjects) == 2:
        print(' Rolls difference: {0}'.format(diff_rollobjects(rollobjects)))

def print_logbook(logbook):
    for l in logbook:
        print_logentry(l)

def printladder():
    print("Legendás     +8")
    print("Epikus       +7")
    print("Fantasztikus +6")
    print("Szuper       +5")
    print("Nagyszerű    +4")
    print("Jó           +3")
    print("Fair         +2")
    print("Átlagos      +1")
    print("Középszerű   +0")
    print("Gyenge       -1")
    print("Szörnyű      -2")

logbook = []

while True:
    print('> ', end='')
    try:
        line = input().strip()
    except EOFError:
        quit();
    if line == 'help' or line == '?' or line == 'h':
        print(' * Commands: quit, history, save, load, repeat, ladder, ![mod]: for dice rolls')
        continue
    if line == '':
        continue
    if line == 'l' or line == 'ladder':
        printladder()
        continue
    if line == 's' or line == 'save':
        save_logbook(logbook)
        continue
    if line == 'load' or line == 'restore':
        logbook = load_logbook()
        continue
    if line == 'his' or line == 'history':
        print_logbook(logbook)
        continue
    if line == 'q' or line == 'quit' or line == 'exit':
        break
    if line == 'r' or line == 'repeat':
        line = lastline
    rollobjects = get_rollobjects(line)
    logentry = create_logentry(rollobjects, line)
    print_logentry(logentry)
    logbook.append(logentry)
    lastline = line

